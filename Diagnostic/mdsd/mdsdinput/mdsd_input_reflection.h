// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.


//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.3.0.5
//   File : mdsd_input_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "mdsd_input_types.h"
#include <bond/core/reflection.h>

namespace mdsdinput
{
    //
    // Time
    //
    struct Time::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_sec_metadata;
        private: static const bond::Metadata s_nsec_metadata;

        public: struct var
        {
            // sec
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::required_field_modifier,
                Time,
                uint64_t,
                &Time::sec,
                &s_sec_metadata
            > sec;
        
            // nsec
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                Time,
                uint32_t,
                &Time::nsec,
                &s_nsec_metadata
            > nsec;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::nsec>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::sec>::type fields2;

        public: typedef fields2::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("Time", "mdsdinput.Time",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // FieldDef
    //
    struct FieldDef::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_name_metadata;
        private: static const bond::Metadata s_fieldType_metadata;

        public: struct var
        {
            // name
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::required_field_modifier,
                FieldDef,
                std::string,
                &FieldDef::name,
                &s_name_metadata
            > name;
        
            // fieldType
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::required_field_modifier,
                FieldDef,
                ::mdsdinput::FieldType,
                &FieldDef::fieldType,
                &s_fieldType_metadata
            > fieldType;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::fieldType>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::name>::type fields2;

        public: typedef fields2::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("FieldDef", "mdsdinput.FieldDef",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // SchemaDef
    //
    struct SchemaDef::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_fields_metadata;
        private: static const bond::Metadata s_timestampFieldIdx_metadata;

        public: struct var
        {
            // fields
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::required_field_modifier,
                SchemaDef,
                std::vector< ::mdsdinput::FieldDef>,
                &SchemaDef::fields,
                &s_fields_metadata
            > fields;
        
            // timestampFieldIdx
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                SchemaDef,
                bond::nullable<uint32_t>,
                &SchemaDef::timestampFieldIdx,
                &s_timestampFieldIdx_metadata
            > timestampFieldIdx;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::timestampFieldIdx>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::fields>::type fields2;

        public: typedef fields2::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("SchemaDef", "mdsdinput.SchemaDef",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Message
    //
    struct Message::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_source_metadata;
        private: static const bond::Metadata s_msgId_metadata;
        private: static const bond::Metadata s_schemaId_metadata;
        private: static const bond::Metadata s_schema_metadata;
        private: static const bond::Metadata s_data_metadata;

        public: struct var
        {
            // source
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::required_field_modifier,
                Message,
                std::string,
                &Message::source,
                &s_source_metadata
            > source;
        
            // msgId
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::required_field_modifier,
                Message,
                uint64_t,
                &Message::msgId,
                &s_msgId_metadata
            > msgId;
        
            // schemaId
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::required_field_modifier,
                Message,
                uint64_t,
                &Message::schemaId,
                &s_schemaId_metadata
            > schemaId;
        
            // schema
            typedef bond::reflection::FieldTemplate<
                4,
                bond::reflection::optional_field_modifier,
                Message,
                bond::nullable< ::mdsdinput::SchemaDef>,
                &Message::schema,
                &s_schema_metadata
            > schema;
        
            // data
            typedef bond::reflection::FieldTemplate<
                5,
                bond::reflection::required_field_modifier,
                Message,
                bond::blob,
                &Message::data,
                &s_data_metadata
            > data;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::data>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::schema>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::schemaId>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::msgId>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::source>::type fields5;

        public: typedef fields5::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("Message", "mdsdinput.Message",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // Ack
    //
    struct Ack::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_msgId_metadata;
        private: static const bond::Metadata s_code_metadata;

        public: struct var
        {
            // msgId
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::required_field_modifier,
                Ack,
                uint64_t,
                &Ack::msgId,
                &s_msgId_metadata
            > msgId;
        
            // code
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                Ack,
                ::mdsdinput::ResponseCode,
                &Ack::code,
                &s_code_metadata
            > code;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::code>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::msgId>::type fields2;

        public: typedef fields2::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("Ack", "mdsdinput.Ack",
                bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace mdsdinput
