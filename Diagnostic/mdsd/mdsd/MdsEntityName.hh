// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.

#pragma once
#ifndef _MDSENTITYNAME_HH_
#define _MDSENTITYNAME_HH_

#include <string>
#include <iostream>
#include "MdsTime.hh"
#include "StoreType.hh"

class MdsdConfig;
class Credentials;

// Repository of metadata about the MDS target we're writing. Might be a server-side XTable
// or Bond blob; might be a local table. This object knows the name of that thing, the kind of
// thing it is, and has a pointer to the access credentials (if any) needed to talk to it.
class MdsEntityName
{
friend std::ostream& operator<<(std::ostream &str, const MdsEntityName &target);

public:
	// SchemasTable accessible with these creds
	MdsEntityName(const MdsdConfig *config, const Credentials *creds);

	// This arbitrary MDS entity (table, blob, whatever)
	MdsEntityName(const std::string &eventName, bool noPerNDay, const MdsdConfig *config,
			const std::string &acct, StoreType::Type sinkType, bool isFullName=false);

	// Require autogenerated move-assignment and copy/move constructor
	MdsEntityName& operator=(MdsEntityName &&orig) = default;
	MdsEntityName(const MdsEntityName&) = default;
	MdsEntityName(MdsEntityName&&) = default;

	// <summary>Compute the XStore table name to be written to right now, at this instant.</summary>
	std::string Name() const;
	// <summary>The XStore table "family" name, i.e. without 10day suffix.</summary>
	std::string Basename() const { return _basename; }
	// <summary>The full-length table name, without 10day suffix, as it would appear in various
	// MDS tools. This can be longer than the 64-char max for XStore table names.</summary>
	std::string PhysicalTableName() const { return _physTableName; }

	// <summary> Get the original Eventname </summary>
	std::string EventName() const { return _eventName; }

	/// <summary>Get the original EventVersion</summary>
	int EventVersion() const { return _eventVersion; }

	// <summary>True if the table name never changes (e.g. no 10day suffix).</summary>
	bool IsConstant() const { return _isConstant; }

	bool IsSchemasTable() const { return _isSchemasTable; }
	StoreType::Type GetStoreType() const { return _storeType; }
	const Credentials* GetCredentials() const { return _creds; }

private:
	// The tablename, with version suffix but without the 10-day suffix, as used when writing
	// to XStore. If the name is "too long", this is the MD5-hashed name.
	std::string _basename;
	bool _isConstant;
	bool _isSchemasTable;
	StoreType::Type _storeType;
	const Credentials* _creds;
	// This form of the name is used in the PhysicalTableName column of SchemasTable. It
	// is identical to _basename except
	// when the name is too long, _basename is hashed, _physTableName is the unhashed,
	// very long form of the name.
	// Despite what the column (and this variable) are called,
	// this name is not the name of the actual physical table.
	std::string _physTableName;
	std::string _eventName;  // save the original event name
	int _eventVersion;      // save the original event version

	// const size_t MaxEntityNameLength = 63;
};

std::ostream& operator<<(std::ostream &str, const MdsEntityName &target);

#endif // _MDSENTITYNAME_HH_

// vim: se sw=8 :
